name: CI Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHONPATH: ${{ github.workspace }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 bandit
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=app/
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=app/
    
    - name: Security scan with bandit
      run: |
        bandit -r . -f json -o bandit-report.json -x */test*,app/ || true
    
    - name: Test with pytest
      run: |
        pytest --cov=. --cov-report=xml --cov-report=term-missing --ignore=app/ tests/ -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -t account-management-api:${{ github.sha }} .
        docker build -t account-management-api:latest .
    
    - name: Test Docker container
      run: |
        # Start container in background
        echo "üöÄ Starting container..."
        docker run -d --name test-app -p 5000:5000 account-management-api:latest
        
        # Wait for application to start with better error handling
        echo "‚è≥ Waiting for application to start..."
        for i in {1..12}; do
          echo "Attempt $i/12"
          if curl -f http://localhost:5000/api/v1/health > /dev/null 2>&1; then
            echo "‚úÖ Application started successfully!"
            break
          fi
          if [ $i -eq 12 ]; then
            echo "‚ùå Application failed to start"
            echo "Container logs:"
            docker logs test-app
            docker stop test-app || true
            docker rm test-app || true
            exit 1
          fi
          sleep 5
        done
        
        # Test basic endpoints
        echo "üß™ Testing endpoints..."
        curl -f http://localhost:5000/ && echo " ‚úÖ Home endpoint OK"
        curl -f http://localhost:5000/api/v1/health && echo " ‚úÖ Health endpoint OK"
        curl -f http://localhost:5000/api/v1/accounts && echo " ‚úÖ Accounts endpoint OK"
        
        # Cleanup
        docker stop test-app || true
        docker rm test-app || true
        
        echo "üéâ All tests passed!"
    
    - name: Docker security scan
      run: |
        # Install trivy
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
        # Scan image
        trivy image --exit-code 0 --severity HIGH,CRITICAL account-management-api:latest || true